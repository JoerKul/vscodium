diff --git a/build/gulpfile.reh.js b/build/gulpfile.reh.js
index e3147945f84..3161bb533d3 100644
--- a/build/gulpfile.reh.js
+++ b/build/gulpfile.reh.js
@@ -351,8 +351,9 @@ function packageTask(type, platform, arch, sourceFolderName, destinationFolderNa
 			}));

 		let productJsonContents;
+		const webviewFilesHash = process.env.AXCODE_CDN_SIGNATURE;
 		const productJsonStream = gulp.src(['product.json'], { base: '.' })
-			.pipe(json({ commit, date: readISODate('out-build'), version }))
+			.pipe(json({ commit, date: readISODate('out-build'), version, webviewFilesHash }))
 			.pipe(es.through(function (file) {
 				productJsonContents = file.contents.toString();
 				this.emit('data', file);
diff --git a/build/lib/fetch.js b/build/lib/fetch.js
index b7da65f4af2..5ecffac435d 100644
--- a/build/lib/fetch.js
+++ b/build/lib/fetch.js
@@ -13,6 +13,9 @@ const log = require("fancy-log");
 const ansiColors = require("ansi-colors");
 const crypto = require("crypto");
 const through2 = require("through2");
+// use undici instead of node-fetch, while undici supports Proxy functionality
+const undici = require('undici');
+const { ProxyAgent } = undici;
 function fetchUrls(urls, options) {
     if (options === undefined) {
         options = {};
@@ -43,9 +46,11 @@ async function fetchUrl(url, options, retries = 10, retryDelay = 1000) {
         const controller = new AbortController();
         const timeout = setTimeout(() => controller.abort(), 30 * 1000);
         try {
-            const response = await fetch(url, {
+            // use undici instead of node-fetch, while undici supports Proxy functionality
+            const response = await undici.fetch(url, {
                 ...options.nodeFetchOptions,
-                signal: controller.signal /* Typings issue with lib.dom.d.ts */
+                signal: controller.signal /* Typings issue with lib.dom.d.ts */,
+				dispatcher: new ProxyAgent(process.env.HTTPS_PROXY || "")
             });
             if (verbose) {
                 log(`Fetch completed: Status ${response.status}. Took ${ansiColors.magenta(`${new Date().getTime() - startTime} ms`)}`);
diff --git a/build/lib/fetch.ts b/build/lib/fetch.ts
index 0c44b8e567f..570eca66277 100644
--- a/build/lib/fetch.ts
+++ b/build/lib/fetch.ts
@@ -10,6 +10,8 @@ import * as ansiColors from 'ansi-colors';
 import * as crypto from 'crypto';
 import * as through2 from 'through2';
 import { Stream } from 'stream';
+// using undici-modules, because node-fetch does not support proxy-agent
+import { fetch, ProxyAgent, RequestInit as undiciRequestInit } from 'undici';

 export interface IFetchOptions {
 	base?: string;
@@ -52,10 +54,12 @@ export async function fetchUrl(url: string, options: IFetchOptions, retries = 10
 		const controller = new AbortController();
 		const timeout = setTimeout(() => controller.abort(), 30 * 1000);
 		try {
+			// using undici-modules, because node-fetch does not support proxy-agent
 			const response = await fetch(url, {
 				...options.nodeFetchOptions,
-				signal: controller.signal as any /* Typings issue with lib.dom.d.ts */
-			});
+				signal: controller.signal as any /* Typings issue with lib.dom.d.ts */,
+				dispatcher: new ProxyAgent(process.env.HTTPS_PROXY ?? "")
+			} as undiciRequestInit);
 			if (verbose) {
 				log(`Fetch completed: Status ${response.status}. Took ${ansiColors.magenta(`${new Date().getTime() - startTime} ms`)}`);
 			}
diff --git a/build/npm/gyp/package.json b/build/npm/gyp/package.json
index a1564133a1e..694407fda60 100644
--- a/build/npm/gyp/package.json
+++ b/build/npm/gyp/package.json
@@ -7,4 +7,4 @@
     "node-gyp": "^10.1.0"
   },
   "scripts": {}
-}
+}
\ No newline at end of file
diff --git a/build/package-lock.json b/build/package-lock.json
index 4499f7cf541..f992eae045d 100644
--- a/build/package-lock.json
+++ b/build/package-lock.json
@@ -57,6 +57,7 @@
         "ternary-stream": "^3.0.0",
         "through2": "^4.0.2",
         "tmp": "^0.2.1",
+        "undici": "6.15.0",
         "vscode-universal-bundler": "^0.1.3",
         "workerpool": "^6.4.0",
         "yauzl": "^2.10.0"
@@ -4326,6 +4327,16 @@
       "integrity": "sha512-GMXzWtsc57XAtguZgaQViUOzs0KTkk8ojr3/xAxXLITqf/3EMwxC0inyETfDFjH/Krbhuep0HNbbjI9i/q3F3g==",
       "dev": true
     },
+    "node_modules/undici": {
+      "version": "6.15.0",
+      "resolved": "https://registry.npmjs.org/undici/-/undici-6.15.0.tgz",
+      "integrity": "sha512-VviMt2tlMg1BvQ0FKXxrz1eJuyrcISrL2sPfBf7ZskX/FCEc/7LeThQaoygsMJpNqrATWQIsRVx+1Dpe4jaYuQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.17"
+      }
+    },
     "node_modules/undici-types": {
       "version": "5.26.5",
       "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
diff --git a/build/package.json b/build/package.json
index 7017b9144e0..4cb85fcfefe 100644
--- a/build/package.json
+++ b/build/package.json
@@ -51,6 +51,7 @@
     "ternary-stream": "^3.0.0",
     "through2": "^4.0.2",
     "tmp": "^0.2.1",
+    "undici": "6.15.0",
     "vscode-universal-bundler": "^0.1.3",
     "workerpool": "^6.4.0",
     "yauzl": "^2.10.0"
diff --git a/build/win32/code.iss b/build/win32/code.iss
index fca3d1e9d9b..6a1d444ea62 100644
--- a/build/win32/code.iss
+++ b/build/win32/code.iss
@@ -8,10 +8,10 @@
 AppId={#AppId}
 AppName={#NameLong}
 AppVerName={#NameVersion}
-AppPublisher=Microsoft Corporation
-AppPublisherURL=https://code.visualstudio.com/
-AppSupportURL=https://code.visualstudio.com/
-AppUpdatesURL=https://code.visualstudio.com/
+AppPublisher=Siemens AG
+AppPublisherURL=https://simatic-ax.siemens.io/
+AppSupportURL=https://simatic-ax.siemens.io/
+AppUpdatesURL=https://simatic-ax.siemens.io/
 DefaultGroupName={#NameLong}
 AllowNoIcons=yes
 OutputDir={#OutputDir}
@@ -1296,9 +1296,47 @@ Root: {#SoftwareClassesRootKey}; Subkey: "Software\Classes\Drive\shell\{#RegValu
 #define Uninstall32RootKey "HKLM32"
 #endif

-Root: {#EnvironmentRootKey}; Subkey: "{#EnvironmentKey}"; ValueType: expandsz; ValueName: "Path"; ValueData: "{code:AddToPath|{app}\bin}"; Tasks: addtopath; Check: NeedsAddToPath(ExpandConstant('{app}\bin'))
+; the line below needs to be commented for our custom path variable update logic to work
+; Root: {#EnvironmentRootKey}; Subkey: "{#EnvironmentKey}"; ValueType: expandsz; ValueName: "Path"; ValueData: "{code:AddToPath|{app}\bin}"; Tasks: addtopath; Check: NeedsAddToPath(ExpandConstant('{app}\bin'))

 [Code]
+// **************************
+// START prerequisites screen
+
+var
+  Page: TWizardPage;
+
+procedure CreateTheWizardPages;
+var
+  RichViewer1 : TRichEditViewer;
+begin
+  Page := CreateCustomPage(wpReady, 'Prerequisites', 'Ensure all necessary prerequisites are installed for SIMATIC AX. See the link below.');
+
+  RichViewer1 := TRichEditViewer.Create(Page);
+  RichViewer1.Left := 0;
+  RichViewer1.Top := 30;
+  RichViewer1.width:=400;
+  RichViewer1.WordWrap := True;
+  RichViewer1.BorderStyle := bsNone;
+  RichViewer1.TabStop := False;
+  RichViewer1.ReadOnly := True;
+  RichViewer1.Parent := Page.Surface;
+  RichViewer1.ParentColor := true;
+  RichViewer1.RTFText :=  '{\rtf1 ' +
+    '{\colortbl ;\red0\green0\blue238;}' +
+    'External link: ' +
+    '{\par \bullet \~ {\field{\*\fldinst{HYPERLINK "https://console.simatic-ax.siemens.io/docs/get-started/prerequisites" }}' +
+    '{\fldrslt{\cf1  SIMATIC AX Prerequisites\cf0 }}}}} ';
+end;
+
+procedure InitializeWizard();
+begin
+  CreateTheWizardPages;
+end;
+
+// END prerequisites screen
+// ************************
+
 function IsBackgroundUpdate(): Boolean;
 begin
   Result := ExpandConstant('{param:update|false}') <> 'false';
@@ -1320,7 +1358,7 @@ begin

   #if "user" == InstallTarget
     if not WizardSilent() and IsAdmin() then begin
-      if MsgBox('This User Installer is not meant to be run as an Administrator. If you would like to install VS Code for all users in this system, download the System Installer instead from https://code.visualstudio.com. Are you sure you want to continue?', mbError, MB_OKCANCEL) = IDCANCEL then begin
+      if MsgBox('This User Installer is not meant to be run as an Administrator. Are you sure you want to continue?', mbError, MB_OKCANCEL) = IDCANCEL then begin
         Result := False;
       end;
     end;
@@ -1466,6 +1504,71 @@ begin
     Result := 'false';
 end;

+// ****************************************
+// START update path variable after install
+
+#ifdef UNICODE
+  #define AW "W"
+#else
+  #define AW "A"
+#endif
+
+const
+  SMTO_ABORTIFHUNG = 2;
+  WM_WININICHANGE = $001A;
+  WM_SETTINGCHANGE = WM_WININICHANGE;
+
+type
+  WPARAM = UINT_PTR;
+  LPARAM = INT_PTR;
+  LRESULT = INT_PTR;
+
+function SendTextMessageTimeout(hWnd: HWND; Msg: UINT;
+  wParam: WPARAM; lParam: PAnsiChar; fuFlags: UINT;
+  uTimeout: UINT; out lpdwResult: DWORD): LRESULT;
+  external 'SendMessageTimeoutA@user32.dll stdcall';
+
+function SetEnvironmentVariable(lpName: string; lpValue: string): BOOL;
+  external 'SetEnvironmentVariable{#AW}@kernel32.dll stdcall';
+
+// this function needs to be moved here to be callable from RefreshEnvironment
+function NeedsAddPath(Param: string): boolean;
+var
+  OrigPath: string;
+begin
+  if not RegQueryStringValue({#EnvironmentRootKey}, '{#EnvironmentKey}', 'Path', OrigPath)
+  then begin
+    Result := True;
+    exit;
+  end;
+  Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
+end;
+
+procedure RefreshEnvironment;
+var
+  S: AnsiString;
+  MsgResult: DWORD;
+  OrigPath: string;
+  NewPath: string;
+  WriteEnv: BOOL;
+  WriteReg: BOOL;
+begin
+  if NeedsAddPath(ExpandConstant('{app}\bin')) then
+  begin
+    S := 'Environment';
+    RegQueryStringValue({#EnvironmentRootKey}, '{#EnvironmentKey}', 'Path', OrigPath);
+    NewPath := OrigPath + ';' + ExpandConstant('{app}\bin');
+    WriteReg := RegWriteExpandStringValue({#EnvironmentRootKey}, '{#EnvironmentKey}', 'Path', NewPath);
+    WriteEnv := SetEnvironmentVariable('Path', NewPath);
+    if not (WriteReg and WriteEnv) then begin
+      MsgBox('Errors happened during setting Environment.', mbError, MB_OK);
+    end else begin
+      SendTextMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, 0,
+        PAnsiChar(S), SMTO_ABORTIFHUNG, 5000, MsgResult);
+    end;
+  end;
+end;
+
 function QualityIsInsiders(): boolean;
 begin
   if '{#Quality}' = 'insider' then
@@ -1506,6 +1609,8 @@ var
 begin
   if CurStep = ssPostInstall then
   begin
+    WizardForm.StatusLabel.Caption := 'Setting environment variable...';
+    RefreshEnvironment;
     if IsBackgroundUpdate() then
     begin
       CreateMutex('{#AppMutex}-ready');
@@ -1533,6 +1638,9 @@ begin
   end;
 end;

+// END update path variable after install
+// **************************************
+
 // https://stackoverflow.com/a/23838239/261019
 procedure Explode(var Dest: TArrayOfString; Text: String; Separator: String);
 var
@@ -1553,18 +1661,6 @@ begin
   until Length(Text)=0;
 end;

-function NeedsAddToPath(VSCode: string): boolean;
-var
-  OrigPath: string;
-begin
-  if not RegQueryStringValue({#EnvironmentRootKey}, '{#EnvironmentKey}', 'Path', OrigPath)
-  then begin
-    Result := True;
-    exit;
-  end;
-  Result := Pos(';' + VSCode + ';', ';' + OrigPath + ';') = 0;
-end;
-
 function AddToPath(VSCode: string): string;
 var
   OrigPath: string;
diff --git a/package-lock.json b/package-lock.json
index 7b029961668..50885f833ea 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -103,6 +103,7 @@
         "fancy-log": "^1.3.3",
         "file-loader": "^6.2.0",
         "glob": "^5.0.13",
+        "global-agent": "^3.0.0",
         "gulp": "^4.0.0",
         "gulp-azure-storage": "^0.12.1",
         "gulp-bom": "^3.0.0",
@@ -4387,8 +4388,7 @@
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/boolean/-/boolean-3.0.2.tgz",
       "integrity": "sha512-RwywHlpCRc3/Wh81MiCKun4ydaIFyW5Ea6JbL6sRCVx5q5irDw7pMXBUFYF/jArQ6YrG36q0kpovc9P/Kd3I4g==",
-      "dev": true,
-      "optional": true
+      "dev": true
     },
     "node_modules/brace-expansion": {
       "version": "1.1.11",
@@ -5987,8 +5987,7 @@
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.0.4.tgz",
       "integrity": "sha512-ZIzRpLJrOj7jjP2miAtgqIfmzbxa4ZOr5jJc601zklsfEx9oTzmmj2nVpIPRpNlRTIh8lc1kyViIY7BWSGNmKw==",
-      "dev": true,
-      "optional": true
+      "dev": true
     },
     "node_modules/diff": {
       "version": "5.0.0",
@@ -6403,8 +6402,7 @@
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/es6-error/-/es6-error-4.1.1.tgz",
       "integrity": "sha512-Um/+FxMr9CISWh0bi5Zv0iOD+4cFh5qLeks1qhAopKVAJw3drgKbKySikp7wGhDL0HPeaja0P5ULZrxLkniUVg==",
-      "dev": true,
-      "optional": true
+      "dev": true
     },
     "node_modules/es6-iterator": {
       "version": "2.0.3",
@@ -8248,7 +8246,6 @@
       "resolved": "https://registry.npmjs.org/global-agent/-/global-agent-3.0.0.tgz",
       "integrity": "sha512-PT6XReJ+D07JvGoxQMkT6qji/jVNfX/h364XHZOWeRzy64sSFr+xJ5OX7LI3b4MPQzdL4H8Y8M0xzPpsVMwA8Q==",
       "dev": true,
-      "optional": true,
       "dependencies": {
         "boolean": "^3.0.1",
         "es6-error": "^4.1.1",
@@ -8323,7 +8320,6 @@
       "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.1.tgz",
       "integrity": "sha512-mJPRTc/P39NH/iNG4mXa9aIhNymaQikTrnspeCa2ZuJ+mH2QN/rXwtX3XwKrHqWgUQFbNZKtHM105aHzJalElw==",
       "dev": true,
-      "optional": true,
       "dependencies": {
         "define-properties": "^1.1.3"
       },
@@ -11857,8 +11853,7 @@
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
       "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus= sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
-      "dev": true,
-      "optional": true
+      "dev": true
     },
     "node_modules/json5": {
       "version": "2.2.3",
@@ -12720,7 +12715,6 @@
       "resolved": "https://registry.npmjs.org/matcher/-/matcher-3.0.0.tgz",
       "integrity": "sha512-OkeDaAZ/bQCxeFAozM55PKcKU0yJMPGifLwV4Qgjitu+5MoAfSQN4lsLJeXZ1b8w0x+/Emda6MZgXS1jvsapng==",
       "dev": true,
-      "optional": true,
       "dependencies": {
         "escape-string-regexp": "^4.0.0"
       },
@@ -16307,7 +16301,6 @@
       "resolved": "https://registry.npmjs.org/roarr/-/roarr-2.15.4.tgz",
       "integrity": "sha512-CHhPh+UNHD2GTXNYhPWLnU8ONHdI+5DI+4EYIAOaiD63rHeYlZvyh8P+in5999TTSFgUYuKUAjzRI4mdh/p+2A==",
       "dev": true,
-      "optional": true,
       "dependencies": {
         "boolean": "^3.0.1",
         "detect-node": "^2.0.4",
@@ -16461,8 +16454,7 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/semver-compare/-/semver-compare-1.0.0.tgz",
       "integrity": "sha1-De4hahyUGrN+nvsXiPavxf9VN/w= sha512-YM3/ITh2MJ5MtzaM429anh+x2jiLVjqILF4m4oyQB18W7Ggea7BfqdH/wGMK7dDiMghv/6WG7znWMwUDzJiXow==",
-      "dev": true,
-      "optional": true
+      "dev": true
     },
     "node_modules/semver-greatest-satisfied-range": {
       "version": "1.1.0",
@@ -16481,7 +16473,6 @@
       "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
       "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
       "dev": true,
-      "optional": true,
       "dependencies": {
         "type-fest": "^0.13.1"
       },
@@ -16497,7 +16488,6 @@
       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
       "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
       "dev": true,
-      "optional": true,
       "engines": {
         "node": ">=10"
       },
diff --git a/package.json b/package.json
index 7e0de1810c6..f3c31f6de3f 100644
--- a/package.json
+++ b/package.json
@@ -43,7 +43,7 @@
     "update-localization-extension": "node build/npm/update-localization-extension.js",
     "smoketest": "node build/lib/preLaunch.js && cd test/smoke && npm run compile && node test/index.js",
     "smoketest-no-compile": "cd test/smoke && node test/index.js",
-    "download-builtin-extensions": "node build/lib/builtInExtensions.js",
+    "download-builtin-extensions": "node -r 'global-agent/bootstrap' build/lib/builtInExtensions.js",
     "download-builtin-extensions-cg": "node build/lib/builtInExtensionsCG.js",
     "monaco-compile-check": "tsc -p src/tsconfig.monaco.json --noEmit",
     "tsec-compile-check": "node node_modules/tsec/bin/tsec -p src/tsconfig.tsec.json",
@@ -69,7 +69,9 @@
     "extensions-ci": "node ./node_modules/gulp/bin/gulp.js extensions-ci",
     "extensions-ci-pr": "node ./node_modules/gulp/bin/gulp.js extensions-ci-pr",
     "perf": "node scripts/code-perf.js",
-    "update-build-ts-version": "npm install typescript@next && tsc -p ./build/tsconfig.build.json"
+    "update-build-ts-version": "npm install typescript@next && tsc -p ./build/tsconfig.build.json",
+    "server:init": "npm run --prefix ./build compile && npm run compile && npm run download-builtin-extensions",
+    "server:smoketest": "npm run --prefix ./test/smoke compile && npm run smoketest-no-compile --web --headless --electronArgs=\"--disable-dev-shm-usage --use-gl=swiftshader\""
   },
   "dependencies": {
     "@microsoft/1ds-core-js": "^3.2.13",
@@ -165,6 +167,7 @@
     "fancy-log": "^1.3.3",
     "file-loader": "^6.2.0",
     "glob": "^5.0.13",
+    "global-agent": "^3.0.0",
     "gulp": "^4.0.0",
     "gulp-azure-storage": "^0.12.1",
     "gulp-bom": "^3.0.0",
diff --git a/product.json b/product.json
index 5f64faba48b..f6c42bc638f 100644
--- a/product.json
+++ b/product.json
@@ -1,36 +1,72 @@
 {
-	"nameShort": "Code - OSS",
-	"nameLong": "Code - OSS",
-	"applicationName": "code-oss",
-	"dataFolderName": ".vscode-oss",
-	"win32MutexName": "vscodeoss",
-	"licenseName": "MIT",
-	"licenseUrl": "https://github.com/microsoft/vscode/blob/main/LICENSE.txt",
-	"serverLicenseUrl": "https://github.com/microsoft/vscode/blob/main/LICENSE.txt",
+	"nameShort": "AX Code",
+	"nameLong": "AX Code",
+	"applicationName": "axcode",
+	"dataFolderName": ".axcode",
+	"win32MutexName": "axcode",
 	"serverGreeting": [],
 	"serverLicense": [],
 	"serverLicensePrompt": "",
-	"serverApplicationName": "code-server-oss",
-	"serverDataFolderName": ".vscode-server-oss",
-	"tunnelApplicationName": "code-tunnel-oss",
-	"win32DirName": "Microsoft Code OSS",
-	"win32NameVersion": "Microsoft Code OSS",
-	"win32RegValueName": "CodeOSS",
-	"win32x64AppId": "{{D77B7E06-80BA-4137-BCF4-654B95CCEBC5}",
-	"win32arm64AppId": "{{D1ACE434-89C5-48D1-88D3-E2991DF85475}",
-	"win32x64UserAppId": "{{CC6B787D-37A0-49E8-AE24-8559A032BE0C}",
-	"win32arm64UserAppId": "{{3AEBF0C8-F733-4AD4-BADE-FDB816D53D7B}",
-	"win32AppUserModelId": "Microsoft.CodeOSS",
-	"win32ShellNameShort": "C&ode - OSS",
-	"win32TunnelServiceMutex": "vscodeoss-tunnelservice",
-	"win32TunnelMutex": "vscodeoss-tunnel",
-	"darwinBundleIdentifier": "com.visualstudio.code.oss",
-	"linuxIconName": "code-oss",
+	"serverApplicationName": "axcode-server",
+	"serverDataFolderName": "axcode-server",
+	"tunnelApplicationName": "axcode-tunnel",
+	"win32DirName": "AX Code",
+	"win32NameVersion": "AX Code",
+	"win32RegValueName": "AXCode",
+	"quality": "stable",
+	"enableTelemetry": false,
+	"win32x64AppId": "{{730652E6-A34C-4F18-A219-EC1B87F562C4}",
+	"win32arm64AppId": "{{B86D79D0-3390-4106-BD5F-F5E91ABBA1DA}",
+	"win32x64UserAppId": "{{5DC7D44B-0F9F-4D36-ABBD-F2A6D1781932}",
+	"win32arm64UserAppId": "{{7199CBAC-D5FC-46C7-A4E2-4C81BDBFABD2}",
+	"win32AppUserModelId": "Siemens.AX.Code",
+	"win32ShellNameShort": "AX Code",
+	"win32TunnelServiceMutex": "axcode.server-tunnelservice",
+	"win32TunnelMutex": "axcode.server-tunnel",
+	"darwinBundleIdentifier": "com.siemens.simatic-ax.code",
+	"linuxIconName": "axcode",
 	"licenseFileName": "LICENSE.txt",
-	"reportIssueUrl": "https://github.com/microsoft/vscode/issues/new",
+	"reportIssueUrl": "https://console.simatic-ax.siemens.io/?feedback",
 	"nodejsRepository": "https://nodejs.org",
-	"urlProtocol": "code-oss",
-	"webviewContentExternalBaseUrlTemplate": "https://{{uuid}}.vscode-cdn.net/insider/ef65ac1ba57f57f2a3961bfe94aa20481caca4c6/out/vs/workbench/contrib/webview/browser/pre/",
+	"urlProtocol": "axcode",
+	"webviewFilesHash": "00b0269924d52f4640cf24df0144dc68ae906568",
+	"webviewContentExternalBaseUrlTemplate": "https://{{uuid}}.cdn.axcode.simatic-ax.siemens.io/{{hash}}/out/vs/workbench/contrib/webview/browser/pre/",
+	"licenseUrl": "https://console.simatic-ax.siemens.io/licenses",
+	"serverLicenseUrl": "https://console.simatic-ax.siemens.io/licenses",
+	"extensionKind": {
+		"Shan.code-settings-sync": [
+			"ui"
+		],
+		"shalldie.background": [
+			"ui"
+		],
+		"CoenraadS.bracket-pair-colorizer": [
+			"ui",
+			"workspace"
+		],
+		"CoenraadS.bracket-pair-colorizer-2": [
+			"ui"
+		],
+		"wayou.vscode-todo-highlight": [
+			"ui",
+			"workspace"
+		],
+		"aaron-bond.better-comments": [
+			"ui",
+			"workspace"
+		],
+		"vscodevim.vim": [
+			"ui"
+		],
+		"tuttieee.emacs-mcx": [
+			"ui"
+		]
+	},
+	"extensionPointExtensionKind": {
+		"typescriptServerPlugins": [
+			"workspace"
+		]
+	},
 	"builtInExtensions": [
 		{
 			"name": "ms-vscode.js-debug-companion",
@@ -48,6 +84,21 @@
 				"publisherDisplayName": "Microsoft"
 			}
 		},
+		{
+			"name": "redhat.vscode-yaml",
+			"version": "1.14.0",
+			"repo": "https://github.com/redhat-developer/vscode-yaml",
+			"metadata": {
+				"id": "2061917f-f76a-458a-8da9-f162de22b97e",
+				"publisherId": {
+					"publisherId": "eed56242-9699-4317-8bc7-e9f4b9bdd3ff",
+					"publisherName": "redhat",
+					"displayName": "Red Hat",
+					"flags": "verified"
+				},
+				"publisherDisplayName": "Red Hat"
+			}
+		},
 		{
 			"name": "ms-vscode.js-debug",
 			"version": "1.94.0",
@@ -80,5 +131,32 @@
 				"publisherDisplayName": "Microsoft"
 			}
 		}
+	],
+	"extensionsGallery": {
+		"serviceUrl": "https://open-vsx.org/vscode/gallery",
+		"itemUrl": "https://open-vsx.org/vscode/item",
+		"resourceUrlTemplate": "https://open-vsx.org/vscode/unpkg/{publisher}/{name}/{version}/{path}",
+		"controlUrl": "",
+		"recommendationsUrl": "",
+		"nlsBaseUrl": "",
+		"publisherUrl": ""
+	},
+	"linkProtectionTrustedDomains": [
+		"https://open-vsx.org",
+		"https://console.dev.simatic-ax.siemens.io",
+		"https://console.simatic-ax.siemens.io/",
+		"https://siemens-00001.eu.auth0.com"
+	],
+	"trustedExtensionAuthAccess": [
+		"siemens.ax-extension-manager",
+		"siemens.diagnostic-buffer-vscode",
+		"siemens.performance-info-vscode",
+		"siemens.plc-debug",
+		"siemens.plc-explorer",
+		"siemens.plc-online-hub",
+		"siemens.tracing-vscode",
+		"siemens.vscode-ax-auth",
+		"siemens.vscode-hw-download",
+		"siemens.vscode-sw-download"
 	]
-}
+}
\ No newline at end of file
diff --git a/remote/package-lock.json b/remote/package-lock.json
index 58725751af9..3101c5697e8 100644
--- a/remote/package-lock.json
+++ b/remote/package-lock.json
@@ -35,6 +35,7 @@
         "kerberos": "2.1.1",
         "minimist": "^1.2.6",
         "native-watchdog": "^1.4.1",
+        "node-fetch": "2.6.0",
         "node-pty": "1.1.0-beta21",
         "tas-client-umd": "0.2.0",
         "vscode-oniguruma": "1.7.0",
@@ -737,6 +738,15 @@
       "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-3.2.1.tgz",
       "integrity": "sha512-mmcei9JghVNDYydghQmeDX8KoAm0FAiYyIcUt/N4nhyAipB17pllZQDOJD2fotxABnt4Mdz+dKTO7eftLg4d0A=="
     },
+    "node_modules/node-fetch": {
+      "version": "2.6.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.0.tgz",
+      "integrity": "sha512-8dG4H5ujfvFiqDmVu9fQ5bOHUC15JMjMY/Zumv26oOvvVJjM67KF8koCWIabKQ1GJIa9r2mMZscBq/TbdOcmNA==",
+      "license": "MIT",
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      }
+    },
     "node_modules/node-gyp-build": {
       "version": "4.8.1",
       "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.8.1.tgz",
diff --git a/remote/package.json b/remote/package.json
index c107b048e45..1bd75efc501 100644
--- a/remote/package.json
+++ b/remote/package.json
@@ -30,6 +30,7 @@
     "kerberos": "2.1.1",
     "minimist": "^1.2.6",
     "native-watchdog": "^1.4.1",
+    "node-fetch": "2.6.0",
     "node-pty": "1.1.0-beta21",
     "tas-client-umd": "0.2.0",
     "vscode-oniguruma": "1.7.0",
diff --git a/remote/web/package-lock.json b/remote/web/package-lock.json
index b971ca265f0..2bb88448404 100644
--- a/remote/web/package-lock.json
+++ b/remote/web/package-lock.json
@@ -21,6 +21,7 @@
 				"@xterm/addon-webgl": "^0.19.0-beta.64",
 				"@xterm/xterm": "^5.6.0-beta.64",
 				"jschardet": "3.1.3",
+				"node-fetch": "2.6.0",
 				"tas-client-umd": "0.2.0",
 				"vscode-oniguruma": "1.7.0",
 				"vscode-textmate": "9.1.0"
@@ -155,6 +156,15 @@
 				"node": ">=0.1.90"
 			}
 		},
+		"node_modules/node-fetch": {
+			"version": "2.6.0",
+			"resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.0.tgz",
+			"integrity": "sha512-8dG4H5ujfvFiqDmVu9fQ5bOHUC15JMjMY/Zumv26oOvvVJjM67KF8koCWIabKQ1GJIa9r2mMZscBq/TbdOcmNA==",
+			"license": "MIT",
+			"engines": {
+				"node": "4.x || >=6.0.0"
+			}
+		},
 		"node_modules/tas-client-umd": {
 			"version": "0.2.0",
 			"resolved": "https://registry.npmjs.org/tas-client-umd/-/tas-client-umd-0.2.0.tgz",
diff --git a/remote/web/package.json b/remote/web/package.json
index 27be6a503bd..1f582e06ea1 100644
--- a/remote/web/package.json
+++ b/remote/web/package.json
@@ -16,6 +16,7 @@
 		"@xterm/addon-webgl": "^0.19.0-beta.64",
 		"@xterm/xterm": "^5.6.0-beta.64",
 		"jschardet": "3.1.3",
+		"node-fetch": "2.6.0",
 		"tas-client-umd": "0.2.0",
 		"vscode-oniguruma": "1.7.0",
 		"vscode-textmate": "9.1.0"
diff --git a/src/tsconfig.base.json b/src/tsconfig.base.json
index 9c7aacd4f11..c695fabb1b0 100644
--- a/src/tsconfig.base.json
+++ b/src/tsconfig.base.json
@@ -5,8 +5,8 @@
 		"experimentalDecorators": true,
 		"noImplicitReturns": true,
 		"noImplicitOverride": true,
-		"noUnusedLocals": true,
-		"allowUnreachableCode": false,
+		"noUnusedLocals": false, // makes it easier for patching
+		"allowUnreachableCode": true,
 		"strict": true,
 		"exactOptionalPropertyTypes": false,
 		"useUnknownInCatchVariables": false,
diff --git a/src/vs/base/common/product.ts b/src/vs/base/common/product.ts
index 1f58ce0fee8..922ed21c74d 100644
--- a/src/vs/base/common/product.ts
+++ b/src/vs/base/common/product.ts
@@ -81,6 +81,7 @@ export interface IProductConfiguration {
 	readonly webUrl?: string;
 	readonly webEndpointUrlTemplate?: string;
 	readonly webviewContentExternalBaseUrlTemplate?: string;
+	readonly webviewFilesHash?: string;
 	readonly target?: string;
 	readonly nlsCoreBaseUrl?: string;

diff --git a/src/vs/code/browser/workbench/workbench-dev.esm.html b/src/vs/code/browser/workbench/workbench-dev.esm.html
index 140030d8abe..f783ce541cf 100644
--- a/src/vs/code/browser/workbench/workbench-dev.esm.html
+++ b/src/vs/code/browser/workbench/workbench-dev.esm.html
@@ -11,7 +11,7 @@
 		<meta name="mobile-web-app-capable" content="yes" />
 		<meta name="apple-mobile-web-app-capable" content="yes" />
 		<meta name="apple-mobile-web-app-title" content="Code">
-		<link rel="apple-touch-icon" href="{{WORKBENCH_WEB_BASE_URL}}/resources/server/code-192.png" />
+		<link rel="apple-touch-icon" href=".{{WORKBENCH_WEB_BASE_URL}}/resources/server/code-192.png" />

 		<!-- Disable pinch zooming -->
 		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
@@ -26,8 +26,8 @@
 		<meta id="vscode-workbench-builtin-extensions" data-settings="{{WORKBENCH_BUILTIN_EXTENSIONS}}">

 		<!-- Workbench Icon/Manifest/CSS -->
-		<link rel="icon" href="{{WORKBENCH_WEB_BASE_URL}}/resources/server/favicon.ico" type="image/x-icon" />
-		<link rel="manifest" href="{{WORKBENCH_WEB_BASE_URL}}/resources/server/manifest.json" crossorigin="use-credentials" />
+		<link rel="icon" href=".{{WORKBENCH_WEB_BASE_URL}}/resources/server/favicon.ico" type="image/x-icon" />
+		<link rel="manifest" href=".{{WORKBENCH_WEB_BASE_URL}}/resources/server/manifest.json" crossorigin="use-credentials" />
 		<style id="vscode-css-modules" type="text/css" media="screen"></style>

 	</head>
@@ -37,7 +37,7 @@

 	<!-- Startup (do not modify order of script tags!) -->
 	<script>
-		const baseUrl = new URL('{{WORKBENCH_WEB_BASE_URL}}', window.location.origin).toString();
+		const baseUrl = new URL(`${window.location.pathname.replace(/\/$/,"")}{{WORKBENCH_WEB_BASE_URL}}`,window.location.origin).toString();
 		globalThis._VSCODE_FILE_ROOT = baseUrl + '/out/';
 	</script>
 	<script>
@@ -63,5 +63,5 @@
 	<script>
 		performance.mark('code/willLoadWorkbenchMain');
 	</script>
-	<script type="module" src="{{WORKBENCH_WEB_BASE_URL}}/out/vs/code/browser/workbench/workbench.js"></script>
+	<script type="module" src=".{{WORKBENCH_WEB_BASE_URL}}/out/vs/code/browser/workbench/workbench.js"></script>
 </html>
diff --git a/src/vs/code/browser/workbench/workbench.esm.html b/src/vs/code/browser/workbench/workbench.esm.html
index 77881982735..e14f06cd633 100644
--- a/src/vs/code/browser/workbench/workbench.esm.html
+++ b/src/vs/code/browser/workbench/workbench.esm.html
@@ -11,7 +11,7 @@
 		<meta name="mobile-web-app-capable" content="yes" />
 		<meta name="apple-mobile-web-app-capable" content="yes" />
 		<meta name="apple-mobile-web-app-title" content="Code">
-		<link rel="apple-touch-icon" href="{{WORKBENCH_WEB_BASE_URL}}/resources/server/code-192.png" />
+		<link rel="apple-touch-icon" href=".{{WORKBENCH_WEB_BASE_URL}}/resources/server/code-192.png" />

 		<!-- Disable pinch zooming -->
 		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
@@ -23,9 +23,9 @@
 		<meta id="vscode-workbench-auth-session" data-settings="{{WORKBENCH_AUTH_SESSION}}">

 		<!-- Workbench Icon/Manifest/CSS -->
-		<link rel="icon" href="{{WORKBENCH_WEB_BASE_URL}}/resources/server/favicon.ico" type="image/x-icon" />
-		<link rel="manifest" href="{{WORKBENCH_WEB_BASE_URL}}/resources/server/manifest.json" crossorigin="use-credentials" />
-		<link rel="stylesheet" href="{{WORKBENCH_WEB_BASE_URL}}/out/vs/code/browser/workbench/workbench.css">
+		<link rel="icon" href=".{{WORKBENCH_WEB_BASE_URL}}/resources/server/favicon.ico" type="image/x-icon" />
+		<link rel="manifest" href=".{{WORKBENCH_WEB_BASE_URL}}/resources/server/manifest.json" crossorigin="use-credentials" />
+		<link rel="stylesheet" href=".{{WORKBENCH_WEB_BASE_URL}}/out/vs/code/browser/workbench/workbench.css">

 	</head>

@@ -34,15 +34,15 @@

 	<!-- Startup (do not modify order of script tags!) -->
 	<script>
-		const baseUrl = new URL('{{WORKBENCH_WEB_BASE_URL}}', window.location.origin).toString();
+		const baseUrl = new URL(`${window.location.pathname.replace(/\/$/,"")}{{WORKBENCH_WEB_BASE_URL}}`,window.location.origin).toString();
 		globalThis._VSCODE_FILE_ROOT = baseUrl + '/out/';
 	</script>
 	<script>
 		performance.mark('code/willLoadWorkbenchMain');
 	</script>
 	<!-- always ensure built in english NLS messages -->
-	<script type="module" src="{{WORKBENCH_NLS_FALLBACK_URL}}"></script>
+	<script type="module" src=".{{WORKBENCH_NLS_FALLBACK_URL}}"></script>
 	<!-- attempt to load NLS messages in case non-english -->
-	<script type="module" src="{{WORKBENCH_NLS_URL}}"></script>
-	<script type="module" src="{{WORKBENCH_WEB_BASE_URL}}/out/vs/code/browser/workbench/workbench.js"></script>
+	<script type="module" src=".{{WORKBENCH_NLS_URL}}"></script>
+	<script type="module" src=".{{WORKBENCH_WEB_BASE_URL}}/out/vs/code/browser/workbench/workbench.js"></script>
 </html>
diff --git a/src/vs/code/browser/workbench/workbench.html b/src/vs/code/browser/workbench/workbench.html
index a4e95165cfb..dfe9e116bbc 100644
--- a/src/vs/code/browser/workbench/workbench.html
+++ b/src/vs/code/browser/workbench/workbench.html
@@ -10,23 +10,22 @@
 		<!-- Mobile tweaks -->
 		<meta name="mobile-web-app-capable" content="yes" />
 		<meta name="apple-mobile-web-app-capable" content="yes" />
-		<meta name="apple-mobile-web-app-title" content="Code">
+		<meta name="apple-mobile-web-app-title" content="Code" />
 		<link rel="apple-touch-icon" href="{{WORKBENCH_WEB_BASE_URL}}/resources/server/code-192.png" />

 		<!-- Disable pinch zooming -->
-		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
+		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />

 		<!-- Workbench Configuration -->
-		<meta id="vscode-workbench-web-configuration" data-settings="{{WORKBENCH_WEB_CONFIGURATION}}">
+		<meta id="vscode-workbench-web-configuration" data-settings="{{WORKBENCH_WEB_CONFIGURATION}}" />

 		<!-- Workbench Auth Session -->
-		<meta id="vscode-workbench-auth-session" data-settings="{{WORKBENCH_AUTH_SESSION}}">
+		<meta id="vscode-workbench-auth-session" data-settings="{{WORKBENCH_AUTH_SESSION}}" />

 		<!-- Workbench Icon/Manifest/CSS -->
 		<link rel="icon" href="{{WORKBENCH_WEB_BASE_URL}}/resources/server/favicon.ico" type="image/x-icon" />
 		<link rel="manifest" href="{{WORKBENCH_WEB_BASE_URL}}/resources/server/manifest.json" crossorigin="use-credentials" />
-		<link data-name="vs/workbench/workbench.web.main" rel="stylesheet" href="{{WORKBENCH_WEB_BASE_URL}}/out/vs/workbench/workbench.web.main.css">
-
+		<link data-name="vs/workbench/workbench.web.main" rel="stylesheet" href="{{WORKBENCH_WEB_BASE_URL}}/out/vs/workbench/workbench.web.main.css" />
 	</head>

 	<body aria-label="">
diff --git a/src/vs/editor/test/node/classification/typescript.test.ts b/src/vs/editor/test/node/classification/typescript.test.ts
index 4166eadcd23..40d305fece5 100644
--- a/src/vs/editor/test/node/classification/typescript.test.ts
+++ b/src/vs/editor/test/node/classification/typescript.test.ts
@@ -108,7 +108,6 @@ function parseTest(fileName: string): ITest {
 	return { content, assertions };
 }

-// @ts-expect-error
 function executeTest(fileName: string, parseFunc: IParseFunc): void {
 	const { content, assertions } = parseTest(fileName);
 	const actual = parseFunc(content);
diff --git a/src/vs/platform/telemetry/common/telemetryService.ts b/src/vs/platform/telemetry/common/telemetryService.ts
index 51fbb8fa753..89bf5c9026f 100644
--- a/src/vs/platform/telemetry/common/telemetryService.ts
+++ b/src/vs/platform/telemetry/common/telemetryService.ts
@@ -216,7 +216,8 @@ Registry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfigurat
 				localize('telemetry.telemetryLevel.off', "Disables all product telemetry.")
 			],
 			'markdownDescription': getTelemetryLevelSettingDescription(),
-			'default': TelemetryConfiguration.ON,
+			'default': TelemetryConfiguration.OFF,
+			'doNotSuggest': true,
 			'restricted': true,
 			'scope': ConfigurationScope.APPLICATION,
 			'tags': ['usesOnlineServices', 'telemetry']
diff --git a/src/vs/platform/update/common/update.config.contribution.ts b/src/vs/platform/update/common/update.config.contribution.ts
index d96926b5578..157fd81c8a7 100644
--- a/src/vs/platform/update/common/update.config.contribution.ts
+++ b/src/vs/platform/update/common/update.config.contribution.ts
@@ -18,7 +18,8 @@ configurationRegistry.registerConfiguration({
 		'update.mode': {
 			type: 'string',
 			enum: ['none', 'manual', 'start', 'default'],
-			default: 'default',
+			default: 'none',
+			doNotSuggest: true,
 			scope: ConfigurationScope.APPLICATION,
 			description: localize('updateMode', "Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service."),
 			tags: ['usesOnlineServices'],
@@ -50,7 +51,8 @@ configurationRegistry.registerConfiguration({
 		},
 		'update.showReleaseNotes': {
 			type: 'boolean',
-			default: true,
+			default: false,
+			doNotSuggest: true,
 			scope: ConfigurationScope.APPLICATION,
 			description: localize('showReleaseNotes', "Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service."),
 			tags: ['usesOnlineServices']
diff --git a/src/vs/server/node/remoteExtensionHostAgentServer.ts b/src/vs/server/node/remoteExtensionHostAgentServer.ts
index c77fbfd3736..32b724089ec 100644
--- a/src/vs/server/node/remoteExtensionHostAgentServer.ts
+++ b/src/vs/server/node/remoteExtensionHostAgentServer.ts
@@ -874,9 +874,8 @@ class WebEndpointOriginChecker {

 	public static create(productService: IProductService): WebEndpointOriginChecker {
 		const webEndpointUrlTemplate = productService.webEndpointUrlTemplate;
-		const commit = productService.commit;
-		const quality = productService.quality;
-		if (!webEndpointUrlTemplate || !commit || !quality) {
+		const hash = productService.webviewFilesHash;
+		if (!webEndpointUrlTemplate || !hash) {
 			return new WebEndpointOriginChecker(null);
 		}

@@ -884,8 +883,7 @@ class WebEndpointOriginChecker {
 		const exampleUrl = new URL(
 			webEndpointUrlTemplate
 				.replace('{{uuid}}', uuid)
-				.replace('{{commit}}', commit)
-				.replace('{{quality}}', quality)
+				.replace('{{hash}}', hash)
 		);
 		const exampleOrigin = exampleUrl.origin;
 		const originRegExpSource = (
diff --git a/src/vs/server/node/remoteTerminalChannel.ts b/src/vs/server/node/remoteTerminalChannel.ts
index 399c8d8f8e6..f2c9d57ef1e 100644
--- a/src/vs/server/node/remoteTerminalChannel.ts
+++ b/src/vs/server/node/remoteTerminalChannel.ts
@@ -158,7 +158,6 @@ export class RemoteTerminalChannel extends Disposable implements IServerChannel<
 			case RemoteTerminalChannelRequest.AcceptDetachInstanceReply: return this._ptyHostService.acceptDetachInstanceReply.apply(this._ptyHostService, args);
 		}

-		// @ts-expect-error Assert command is the `never` type to ensure all messages are handled
 		throw new Error(`IPC Command ${command} not found`);
 	}

@@ -179,7 +178,6 @@ export class RemoteTerminalChannel extends Disposable implements IServerChannel<
 			case RemoteTerminalChannelEvent.OnDidChangeProperty: return this._ptyHostService.onDidChangeProperty;
 		}

-		// @ts-expect-error Assert event is the `never` type to ensure all messages are handled
 		throw new Error(`IPC Command ${event} not found`);
 	}

diff --git a/src/vs/server/node/webClientServer.ts b/src/vs/server/node/webClientServer.ts
index 6ef3eac5f02..0fa2ea4ea4c 100644
--- a/src/vs/server/node/webClientServer.ts
+++ b/src/vs/server/node/webClientServer.ts
@@ -397,7 +397,7 @@ export class WebClientServer {
 				`script-src 'self' 'unsafe-eval' ${WORKBENCH_NLS_BASE_URL ?? ''} blob: 'nonce-1nline-m4p' ${this._getScriptCspHashes(data).join(' ')} '${webWorkerExtensionHostIframeScriptSHA}' 'sha256-/r7rqQ+yrxt57sxLuQ6AMYcy/lUpvAIzHjIJt/OeLWU=' ${useTestResolver ? '' : `http://${remoteAuthority}`};` : // the sha is the same as in src/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.esm.html
 				`script-src 'self' 'unsafe-eval' ${WORKBENCH_NLS_BASE_URL ?? ''} ${this._getScriptCspHashes(data).join(' ')} '${webWorkerExtensionHostIframeScriptSHA}' ${useTestResolver ? '' : `http://${remoteAuthority}`};`, // the sha is the same as in src/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html
 			'child-src \'self\';',
-			`frame-src 'self' https://*.vscode-cdn.net data:;`,
+			`frame-src 'self' https://*.cdn.axcode.simatic-ax.siemens.io data:;`,
 			'worker-src \'self\' data: blob:;',
 			'style-src \'self\' \'unsafe-inline\';',
 			'connect-src \'self\' ws: wss: https:;',
diff --git a/src/vs/workbench/api/test/browser/extHostWebview.test.ts b/src/vs/workbench/api/test/browser/extHostWebview.test.ts
index 9bbf074c7c6..56e4b9250da 100644
--- a/src/vs/workbench/api/test/browser/extHostWebview.test.ts
+++ b/src/vs/workbench/api/test/browser/extHostWebview.test.ts
@@ -163,12 +163,12 @@ suite('ExtHostWebview', () => {
 		const webviewUri = webview.webview.asWebviewUri(sourceUri);
 		assert.strictEqual(
 			webviewUri.toString(),
-			`https://vscode-remote%2Bssh-002dremote-002blocalhost-003dfoo-002fbar.vscode-resource.vscode-cdn.net/Users/cody/x.png`,
+			`https://vscode-remote%2Bssh-002dremote-002blocalhost-003dfoo-002fbar.vscode-resource.cdn.axcode.simatic-ax.siemens.io/Users/cody/x.png`,
 			'Check transform');

 		assert.strictEqual(
 			decodeAuthority(webviewUri.authority),
-			`vscode-remote+${authority}.vscode-resource.vscode-cdn.net`,
+			`vscode-remote+${authority}.vscode-resource.cdn.axcode.simatic-ax.siemens.io`,
 			'Check decoded authority'
 		);
 	});
@@ -186,12 +186,12 @@ suite('ExtHostWebview', () => {
 		const webviewUri = webview.webview.asWebviewUri(sourceUri);
 		assert.strictEqual(
 			webviewUri.toString(),
-			`https://vscode-remote%2Blocalhost-003a8080.vscode-resource.vscode-cdn.net/Users/cody/x.png`,
+			`https://vscode-remote%2Blocalhost-003a8080.vscode-resource.cdn.axcode.simatic-ax.siemens.io/Users/cody/x.png`,
 			'Check transform');

 		assert.strictEqual(
 			decodeAuthority(webviewUri.authority),
-			`vscode-remote+${authority}.vscode-resource.vscode-cdn.net`,
+			`vscode-remote+${authority}.vscode-resource.cdn.axcode.simatic-ax.siemens.io`,
 			'Check decoded authority'
 		);
 	});
diff --git a/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts b/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
index 21f62b646c2..262d19b45b4 100644
--- a/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
+++ b/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
@@ -78,7 +78,8 @@ export class BrowserDialogHandler extends AbstractDialogHandler {
 	async about(): Promise<void> {
 		const detailString = (useAgo: boolean): string => {
 			return localize('aboutDetail',
-				"Version: {0}\nCommit: {1}\nDate: {2}\nBrowser: {3}",
+				// the string concatenation avoids this instance of "VS Code" being replaced with "AX Code"
+				"Version: ${REPLACE_WITH_AXCODE_VERSION_6BE89F21}\nVS " + "Code: {0}\nCommit: {1}\nDate: {2}\nBrowser: {3}",
 				this.productService.version || 'Unknown',
 				this.productService.commit || 'Unknown',
 				this.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',
diff --git a/src/vs/workbench/browser/web.main.ts b/src/vs/workbench/browser/web.main.ts
index 142cfa90cd1..507b6d1df04 100644
--- a/src/vs/workbench/browser/web.main.ts
+++ b/src/vs/workbench/browser/web.main.ts
@@ -464,7 +464,8 @@ export class BrowserMain extends Disposable {
 		const logsStore = 'vscode-logs-store';
 		const handlesStore = 'vscode-filehandles-store';
 		try {
-			indexedDB = await IndexedDB.create('vscode-web-db', 3, [userDataStore, logsStore, handlesStore]);
+			// this is to support hosting on sub-paths
+			indexedDB = await IndexedDB.create(`vscode-web-db${window.location.pathname.replace(/\/$/, '')}`, 3, [userDataStore, logsStore, handlesStore]);

 			// Close onWillShutdown
 			this.onWillShutdownDisposables.add(toDisposable(() => indexedDB?.close()));
diff --git a/src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts b/src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts
index 1fc880f2465..91b02846ca0 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts
@@ -254,7 +254,7 @@ export class ExtensionRecommendationNotificationService extends Disposable imple
 			}
 		}

-		let message = localize('recommended', "Do you want to install the recommended {0} for {1}?", extensionsMessage, name);
+		let message = localize('recommended', "Do you want to install the recommended {0} for {1}? Note that these extensions are not provided by Siemens.", extensionsMessage, name);
 		if (source === RecommendationSource.EXE) {
 			message = localize({ key: 'exeRecommended', comment: ['Placeholder string is the name of the software that is installed.'] }, "You have {0} installed on your system. Do you want to install the recommended {1} for it?", name, extensionsMessage);
 		}
diff --git a/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts b/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
index f4d62c70da1..bf4a6069d82 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts
@@ -135,14 +135,14 @@ Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)
 					localize('extensions.autoUpdate.enabled', 'Download and install updates automatically only for enabled extensions.'),
 					localize('extensions.autoUpdate.false', 'Extensions are not automatically updated.'),
 				],
-				description: localize('extensions.autoUpdate', "Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service."),
+				description: localize('extensions.autoUpdate', "Controls the automatic update behavior of extensions. The updates are fetched from https://open-vsx.org."),
 				default: true,
 				scope: ConfigurationScope.APPLICATION,
 				tags: ['usesOnlineServices']
 			},
 			'extensions.autoCheckUpdates': {
 				type: 'boolean',
-				description: localize('extensionsCheckUpdates', "When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service."),
+				description: localize('extensionsCheckUpdates', "When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from https://open-vsx.org."),
 				default: true,
 				scope: ConfigurationScope.APPLICATION,
 				tags: ['usesOnlineServices']
@@ -1007,6 +1007,24 @@ class ExtensionsContributions extends Disposable implements IWorkbenchContributi
 			});
 		});

+		this.registerExtensionAction({
+			id: 'workbench.extensions.action.listSimaticAXExtensions',
+			title: { value: localize('showSimaticAXExtensions', "Show Simatic AX Extensions"), original: 'Show Simatic AX Extensions' },
+			category: ExtensionsLocalizedLabel,
+			menu: [{
+				id: MenuId.CommandPalette,
+				when: ContextKeyExpr.or(CONTEXT_HAS_LOCAL_SERVER, CONTEXT_HAS_REMOTE_SERVER, CONTEXT_HAS_WEB_SERVER)
+			}, {
+				id: extensionsFilterSubMenu,
+				group: '3_installed',
+				order: 0,
+			}],
+			menuTitles: {
+				[extensionsFilterSubMenu.id]: localize('simaticAX filter', "Simatic AX")
+			},
+			run: () => this.extensionsWorkbenchService.openSearch('@simaticAX ')
+		});
+
 		this.registerExtensionAction({
 			id: 'workbench.extensions.action.listBuiltInExtensions',
 			title: localize2('showBuiltInExtensions', 'Show Built-in Extensions'),
diff --git a/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts b/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
index 18d5dd82d93..cd4766a5a78 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
@@ -21,7 +21,7 @@ import { InstallLocalExtensionsInRemoteAction, InstallRemoteExtensionsInLocalAct
 import { IExtensionManagementService } from '../../../../platform/extensionManagement/common/extensionManagement.js';
 import { IWorkbenchExtensionEnablementService, IExtensionManagementServerService, IExtensionManagementServer } from '../../../services/extensionManagement/common/extensionManagement.js';
 import { ExtensionsInput } from '../common/extensionsInput.js';
-import { ExtensionsListView, EnabledExtensionsView, DisabledExtensionsView, RecommendedExtensionsView, WorkspaceRecommendedExtensionsView, ServerInstalledExtensionsView, DefaultRecommendedExtensionsView, UntrustedWorkspaceUnsupportedExtensionsView, UntrustedWorkspacePartiallySupportedExtensionsView, VirtualWorkspaceUnsupportedExtensionsView, VirtualWorkspacePartiallySupportedExtensionsView, DefaultPopularExtensionsView, DeprecatedExtensionsView, SearchMarketplaceExtensionsView, RecentlyUpdatedExtensionsView, OutdatedExtensionsView, StaticQueryExtensionsView, NONE_CATEGORY } from './extensionsViews.js';
+import { ExtensionsListView, EnabledExtensionsView, DisabledExtensionsView, RecommendedExtensionsView, WorkspaceRecommendedExtensionsView, ServerInstalledExtensionsView, DefaultRecommendedExtensionsView, UntrustedWorkspaceUnsupportedExtensionsView, UntrustedWorkspacePartiallySupportedExtensionsView, VirtualWorkspaceUnsupportedExtensionsView, VirtualWorkspacePartiallySupportedExtensionsView, DefaultPopularExtensionsView, DeprecatedExtensionsView, SearchMarketplaceExtensionsView, RecentlyUpdatedExtensionsView, OutdatedExtensionsView, StaticQueryExtensionsView, NONE_CATEGORY, SimaticAXExtensionsView } from './extensionsViews.js';
 import { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';
 import { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';
 import Severity from '../../../../base/common/severity.js';
@@ -249,6 +249,16 @@ export class ExtensionsViewletViewsContribution extends Disposable implements IW
 			canToggleVisibility: true
 		});

+		viewDescriptors.push({
+			id: 'extensions.simaticAX',
+			name: localize2('simaticAXExtensions', "Simatic AX (Installed)"),
+			ctorDescriptor: new SyncDescriptor(SimaticAXExtensionsView, [{ flexibleHeight: true }]),
+			when: ContextKeyExpr.and(DefaultViewsContext, ContextKeyExpr.not('config.extensions.showSimaticAX')),
+			weight: 40,
+			order: 0,
+			canToggleVisibility: false
+		});
+
 		/* Installed views shall be default in multi server window  */
 		if (servers.length === 1) {
 			/*
@@ -476,6 +486,8 @@ export class ExtensionsViewletViewsContribution extends Disposable implements IW

 }

+const disclaimerHeight = 41;
+
 export class ExtensionsViewPaneContainer extends ViewPaneContainer implements IExtensionsViewPaneContainer {

 	private defaultViewsContextKey: IContextKey<boolean>;
@@ -564,6 +576,10 @@ export class ExtensionsViewPaneContainer extends ViewPaneContainer implements IE
 		overlay.style.backgroundColor = overlayBackgroundColor;
 		hide(overlay);

+		append(this.root, $(
+			'div',
+			{ style: `height: 40px; padding: 0 20px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow-y: hidden; text-overflow: ellipsis;` },
+			'Extensions from the marketplace are not provided by Siemens. Use at your own risk.'));
 		this.header = append(this.root, $('.header'));
 		const placeholder = localize('searchExtensions', "Search Extensions in Marketplace");

@@ -679,7 +695,7 @@ export class ExtensionsViewPaneContainer extends ViewPaneContainer implements IE
 		const searchBoxHeight = 20 + 21 /*margin*/;
 		const headerHeight = this.header && !!this.notificationContainer?.childNodes.length ? this.notificationContainer.clientHeight + searchBoxHeight + 10 /*margin*/ : searchBoxHeight;
 		this.header!.style.height = `${headerHeight}px`;
-		super.layout(new Dimension(dimension.width, dimension.height - headerHeight));
+		super.layout(new Dimension(dimension.width, dimension.height - headerHeight - disclaimerHeight));
 	}

 	override getOptimalWidth(): number {
@@ -796,6 +812,7 @@ export class ExtensionsViewPaneContainer extends ViewPaneContainer implements IE
 			this.searchRecentlyUpdatedExtensionsContextKey.set(ExtensionsListView.isSearchRecentlyUpdatedQuery(value) && !ExtensionsListView.isSearchExtensionUpdatesQuery(value));
 			this.searchOutdatedExtensionsContextKey.set(ExtensionsListView.isOutdatedExtensionsQuery(value) && !ExtensionsListView.isSearchExtensionUpdatesQuery(value));
 			this.searchExtensionUpdatesContextKey.set(ExtensionsListView.isSearchExtensionUpdatesQuery(value));
+			this.searchInstalledExtensionsContextKey.set(ExtensionsListView.isSimaticAXExtensionQuery(value));
 			this.searchEnabledExtensionsContextKey.set(ExtensionsListView.isEnabledExtensionsQuery(value));
 			this.searchDisabledExtensionsContextKey.set(ExtensionsListView.isDisabledExtensionsQuery(value));
 			this.searchBuiltInExtensionsContextKey.set(ExtensionsListView.isSearchBuiltInExtensionsQuery(value));
diff --git a/src/vs/workbench/contrib/extensions/browser/extensionsViews.ts b/src/vs/workbench/contrib/extensions/browser/extensionsViews.ts
index 32bb10a91bc..c64f9a96220 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensionsViews.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensionsViews.ts
@@ -272,7 +272,6 @@ export class ExtensionsListView extends ViewPane {
 			case 'publishedDate': options.sortBy = GallerySortBy.PublishedDate; break;
 			case 'updateDate': options.sortBy = LocalSortBy.UpdateDate; break;
 		}
-
 		const request = createCancelablePromise(async token => {
 			try {
 				this.queryResult = await this.query(parsedQuery, options, token);
@@ -432,6 +431,10 @@ export class ExtensionsListView extends ViewPane {
 			canIncludeInstalledExtensions = false;
 		}

+		if (/@simaticAX/i.test(value)) {
+			extensions = local.filter(t => t.identifier.id.toLowerCase().startsWith("ax.") || t.identifier.id.toLowerCase().startsWith("siemens-ag.") || t.identifier.id.toLowerCase().startsWith("siemens."));
+		}
+
 		else if (/@installed/i.test(value)) {
 			extensions = this.filterInstalledExtensions(local, runningExtensions, query, options);
 		}
@@ -1189,7 +1192,12 @@ export class ExtensionsListView extends ViewPane {
 			|| this.isSearchRecentlyUpdatedQuery(query)
 			|| this.isSearchExtensionUpdatesQuery(query)
 			|| this.isSortInstalledExtensionsQuery(query, sortBy)
-			|| this.isFeatureExtensionsQuery(query);
+			|| this.isFeatureExtensionsQuery(query)
+			|| this.isSimaticAXExtensionQuery(query);
+	}
+
+	static isSimaticAXExtensionQuery(query: string): boolean {
+		return /@simaticAX/i.test(query);
 	}

 	static isSearchBuiltInExtensionsQuery(query: string): boolean {
@@ -1508,7 +1516,17 @@ export class DefaultRecommendedExtensionsView extends ExtensionsListView {
 		}
 		return model;
 	}
+}

+export class SimaticAXExtensionsView extends ExtensionsListView {
+	private readonly simaticExtensionsQuery = '@simaticAX';
+
+	override async show(query: string): Promise<IPagedModel<IExtension>> {
+		if (query && query.trim() !== this.simaticExtensionsQuery) {
+			return this.showEmptyModel();
+		}
+		return await super.show(this.simaticExtensionsQuery);
+	}
 }

 export class RecommendedExtensionsView extends ExtensionsListView {
diff --git a/src/vs/workbench/contrib/extensions/common/extensionQuery.ts b/src/vs/workbench/contrib/extensions/common/extensionQuery.ts
index d6cd57bb5bc..de66a9b0d4c 100644
--- a/src/vs/workbench/contrib/extensions/common/extensionQuery.ts
+++ b/src/vs/workbench/contrib/extensions/common/extensionQuery.ts
@@ -12,7 +12,7 @@ export class Query {
 	}

 	static suggestions(query: string): string[] {
-		const commands = ['installed', 'updates', 'enabled', 'disabled', 'builtin', 'featured', 'popular', 'recommended', 'recentlyPublished', 'workspaceUnsupported', 'deprecated', 'sort', 'category', 'tag', 'ext', 'id'] as const;
+		const commands = ['installed', 'updates', 'enabled', 'disabled', 'builtin', 'featured', 'popular', 'recommended', 'recentlyPublished', 'workspaceUnsupported', 'deprecated', 'sort', 'category', 'tag', 'ext', 'id', 'simaticAX'] as const;
 		const subcommands = {
 			'sort': ['installs', 'rating', 'name', 'publishedDate', 'updateDate'],
 			'category': EXTENSION_CATEGORIES.map(c => `"${c.toLowerCase()}"`),
diff --git a/src/vs/workbench/contrib/issue/browser/issueService.ts b/src/vs/workbench/contrib/issue/browser/issueService.ts
index e0df98d0235..600f3d102f3 100644
--- a/src/vs/workbench/contrib/issue/browser/issueService.ts
+++ b/src/vs/workbench/contrib/issue/browser/issueService.ts
@@ -49,7 +49,7 @@ export class BrowserIssueService implements IWorkbenchIssueService {
 			// If we don't have a extensionId, treat this as a Core issue
 			if (!extensionId) {
 				if (this.productService.reportIssueUrl) {
-					const uri = this.getIssueUriFromStaticContent(this.productService.reportIssueUrl);
+					const uri = this.productService.reportIssueUrl;
 					dom.windowOpenNoOpener(uri);
 					return;
 				}
diff --git a/src/vs/workbench/contrib/issue/common/issue.contribution.ts b/src/vs/workbench/contrib/issue/common/issue.contribution.ts
index a2805613d96..99c7b7a4a4c 100644
--- a/src/vs/workbench/contrib/issue/common/issue.contribution.ts
+++ b/src/vs/workbench/contrib/issue/common/issue.contribution.ts
@@ -8,6 +8,7 @@ import { ICommandAction } from '../../../../platform/action/common/action.js';
 import { Categories } from '../../../../platform/action/common/actionCommonCategories.js';
 import { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';
 import { CommandsRegistry, ICommandMetadata } from '../../../../platform/commands/common/commands.js';
+import { IOpenerService } from '../../../../platform/opener/common/opener.js';
 import { IProductService } from '../../../../platform/product/common/productService.js';
 import { IWorkbenchContribution } from '../../../common/contributions.js';
 import { IWorkbenchIssueService, IssueReporterData } from './issue.js';
@@ -79,7 +80,13 @@ export class BaseIssueContribution extends Disposable implements IWorkbenchContr
 							? { extensionId: args[0] }
 							: args ?? {};

-				return accessor.get(IWorkbenchIssueService).openReporter(data);
+				// return accessor.get(IWorkbenchIssueService).openReporter(data);
+				// open AX feedback website instead
+				const productService = accessor.get(IProductService);
+				const openerService = accessor.get(IOpenerService);
+				if (productService.reportIssueUrl) {
+					openerService.open(productService.reportIssueUrl);
+				}
 			},
 			metadata: OpenIssueReporterCommandMetadata
 		}));
@@ -94,7 +101,13 @@ export class BaseIssueContribution extends Disposable implements IWorkbenchContr
 							? { extensionId: args[0] }
 							: args ?? {};

-				return accessor.get(IWorkbenchIssueService).openReporter(data);
+				// return accessor.get(IWorkbenchIssueService).openReporter(data);
+				// open AX feedback website instead
+				const productService = accessor.get(IProductService);
+				const openerService = accessor.get(IOpenerService);
+				if (productService.reportIssueUrl) {
+					openerService.open(productService.reportIssueUrl);
+				}
 			},
 			metadata: OpenIssueReporterCommandMetadata
 		}));
diff --git a/src/vs/workbench/contrib/issue/electron-sandbox/issue.contribution.ts b/src/vs/workbench/contrib/issue/electron-sandbox/issue.contribution.ts
index 91a0f9b2706..8682f4ef2f0 100644
--- a/src/vs/workbench/contrib/issue/electron-sandbox/issue.contribution.ts
+++ b/src/vs/workbench/contrib/issue/electron-sandbox/issue.contribution.ts
@@ -8,6 +8,8 @@ import { registerAction2, Action2 } from '../../../../platform/actions/common/ac
 import { IWorkbenchIssueService, IssueType, IIssueFormService } from '../common/issue.js';
 import { BaseIssueContribution } from '../common/issue.contribution.js';
 import { IProductService } from '../../../../platform/product/common/productService.js';
+import { IOpenerService } from '../../../../platform/opener/common/opener';
+import { URI } from '../../../../base/common/uri';
 import { Registry } from '../../../../platform/registry/common/platform.js';
 import { Extensions, IWorkbenchContributionsRegistry } from '../../../common/contributions.js';
 import { LifecyclePhase } from '../../../services/lifecycle/common/lifecycle.js';
@@ -97,9 +99,16 @@ class ReportPerformanceIssueUsingReporterAction extends Action2 {
 	}

 	override async run(accessor: ServicesAccessor): Promise<void> {
-		const issueService = accessor.get(IWorkbenchIssueService); // later can just get IIssueFormService
+		//const issueService = accessor.get(IWorkbenchIssueService); // later can just get IIssueFormService

-		return issueService.openReporter({ issueType: IssueType.PerformanceIssue });
+		//return issueService.openReporter({ issueType: IssueType.PerformanceIssue });
+		// open AX feedback dialog
+		// link to our website with opened feedback dialog
+		const productService = accessor.get(IProductService);
+		const openerService = accessor.get(IOpenerService);
+		if (productService.reportIssueUrl) {
+			openerService.open(productService.reportIssueUrl);
+		}
 	}
 }

diff --git a/src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts b/src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts
index 9dfa4afa29a..468df6deb34 100644
--- a/src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts
+++ b/src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts
@@ -35,7 +35,8 @@ class NativeLocalizationWorkbenchContribution extends BaseLocalizationWorkbenchC
 	) {
 		super();

-		this.checkAndInstall();
+		// don't check languages since we only support english anyway
+		// this.checkAndInstall();
 		this._register(this.extensionManagementService.onDidInstallExtensions(e => this.onDidInstallExtensions(e)));
 		this._register(this.extensionManagementService.onDidUninstallExtension(e => this.onDidUninstallExtension(e)));
 	}
diff --git a/src/vs/workbench/contrib/preferences/browser/preferencesSearch.ts b/src/vs/workbench/contrib/preferences/browser/preferencesSearch.ts
index e81c8009f79..8b72d6f9727 100644
--- a/src/vs/workbench/contrib/preferences/browser/preferencesSearch.ts
+++ b/src/vs/workbench/contrib/preferences/browser/preferencesSearch.ts
@@ -30,7 +30,6 @@ export interface IEndpointDetails {
 export class PreferencesSearchService extends Disposable implements IPreferencesSearchService {
 	declare readonly _serviceBrand: undefined;

-	// @ts-expect-error disable remote search for now, ref https://github.com/microsoft/vscode/issues/172411
 	private _installedExtensions: Promise<ILocalExtension[]>;
 	private _remoteSearchProvider: IRemoteSearchProvider | undefined;

diff --git a/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts b/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts
index a020d871b14..633f284dbb0 100644
--- a/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts
+++ b/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts
@@ -111,7 +111,8 @@ registry.registerConfiguration({
 		'workbench.settings.enableNaturalLanguageSearch': {
 			'type': 'boolean',
 			'description': nls.localize('enableNaturalLanguageSettingsSearch', "Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service."),
-			'default': true,
+			'default': false,
+			'doNotSuggest': true,
 			'scope': ConfigurationScope.WINDOW,
 			'tags': ['usesOnlineServices']
 		},
diff --git a/src/vs/workbench/contrib/update/browser/releaseNotesEditor.ts b/src/vs/workbench/contrib/update/browser/releaseNotesEditor.ts
index dca1cfd0026..8f581e443b4 100644
--- a/src/vs/workbench/contrib/update/browser/releaseNotesEditor.ts
+++ b/src/vs/workbench/contrib/update/browser/releaseNotesEditor.ts
@@ -268,7 +268,8 @@ export class ReleaseNotesManager {
 			<head>
 				<base href="https://code.visualstudio.com/raw/">
 				<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
-				<meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src https: data:; media-src https:; style-src 'nonce-${nonce}' https://code.visualstudio.com; script-src 'nonce-${nonce}';">
+				<!-- allow image loading over HTTP, e.g. for local development -->
+				<meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src http: https: data:; media-src http: https:; style-src 'nonce-${nonce}' https://code.visualstudio.com; script-src 'nonce-${nonce}';">
 				<style nonce="${nonce}">
 					${DEFAULT_MARKDOWN_STYLES}
 					${css}
diff --git a/src/vs/workbench/contrib/webview/browser/pre/service-worker.js b/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
index e5fa674ea82..2e3a1557ec4 100644
--- a/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
+++ b/src/vs/workbench/contrib/webview/browser/pre/service-worker.js
@@ -10,7 +10,8 @@ const sw = /** @type {ServiceWorkerGlobalScope} */ (/** @type {any} */ (self));

 const VERSION = 4;

-const resourceCacheName = `vscode-resource-cache-${VERSION}`;
+// this is to support hosting on sub-paths
+const resourceCacheName = `vscode-resource-cache-${VERSION}${location.pathname.replace(/\/$/, '')}`;

 const rootPath = sw.location.pathname.replace(/\/service-worker.js$/, '');

diff --git a/src/vs/workbench/contrib/webview/common/webview.ts b/src/vs/workbench/contrib/webview/common/webview.ts
index 95c65048fcd..78f854b7d2d 100644
--- a/src/vs/workbench/contrib/webview/common/webview.ts
+++ b/src/vs/workbench/contrib/webview/common/webview.ts
@@ -18,7 +18,7 @@ export interface WebviewRemoteInfo {
  * This is hardcoded because we never expect to actually hit it. Instead these requests
  * should always go to a service worker.
  */
-export const webviewResourceBaseHost = 'vscode-cdn.net';
+export const webviewResourceBaseHost = 'cdn.axcode.simatic-ax.siemens.io';

 export const webviewRootResourceAuthority = `vscode-resource.${webviewResourceBaseHost}`;

@@ -31,7 +31,7 @@ export const webviewGenericCspSource = `'self' https://*.${webviewResourceBaseHo
  * we know where to load the resource from (remote or truly local):
  *
  * ```txt
- * ${scheme}+${resource-authority}.vscode-resource.vscode-cdn.net/${path}
+ * ${scheme}+${resource-authority}.vscode-resource.cdn.axcode.simatic-ax.siemens.io/${path}
  * ```
  *
  * @param resource Uri of the resource to load.
diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
index 4641275f880..85bb6217b1d 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
@@ -817,7 +817,7 @@ export class GettingStartedPage extends EditorPane {

 		const header = $('.header', {},
 			$('h1.product-name.caption', {}, this.productService.nameLong),
-			$('p.subtitle.description', {}, localize({ key: 'gettingStarted.editingEvolved', comment: ['Shown as subtitle on the Welcome page.'] }, "Editing evolved"))
+			$('p.subtitle.description', {}, localize({ key: 'gettingStarted.editingEvolved', comment: ['Shown as subtitle on the Welcome page.'] }, "Automation Xpansion"))
 		);

 		const leftColumn = $('.categories-column.categories-column-left', {},);
diff --git a/src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts b/src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts
index 0f8c49a9225..9fc4a44e96e 100644
--- a/src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts
+++ b/src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts
@@ -298,12 +298,6 @@ export const walkthroughs: GettingStartedWalkthroughContent = [
 					media: {
 						type: 'svg', altText: 'Go to file in quick search.', path: 'search.svg'
 					}
-				},
-				{
-					id: 'videoTutorial',
-					title: localize('gettingStarted.videoTutorial.title', "Watch video tutorials"),
-					description: localize('gettingStarted.videoTutorial.description.interpolated', "Watch the first in a series of short & practical video tutorials for VS Code's key features.\n{0}", Button(localize('watch', "Watch Tutorial"), 'https://aka.ms/vscode-getting-started-video')),
-					media: { type: 'svg', altText: 'VS Code Settings', path: 'learn.svg' },
 				}
 			]
 		}
diff --git a/src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts b/src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts
index 0ab68289fb6..6f65b7cf7c9 100644
--- a/src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts
+++ b/src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts
@@ -114,7 +114,7 @@ export class WorkspaceTrustRequestHandler extends Disposable implements IWorkben
 				this.workspaceContextService.getWorkbenchState() !== WorkbenchState.EMPTY ?
 					localize('openLooseFileWorkspaceDetails', "You are trying to open untrusted files in a workspace which is trusted.") :
 					localize('openLooseFileWindowDetails', "You are trying to open untrusted files in a window which is trusted."),
-				localize('openLooseFileLearnMore', "If you don't want to open untrusted files, we recommend to open them in Restricted Mode in a new window as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.")
+				localize('openLooseFileLearnMore', "If you don't want to open untrusted files, we recommend to open them in Restricted Mode in a new window as the files may be malicious.")
 			];

 			// Dialog
@@ -179,7 +179,7 @@ export class WorkspaceTrustRequestHandler extends Disposable implements IWorkben
 					icon: Codicon.shield,
 					markdownDetails: [
 						{ markdown: new MarkdownString(details) },
-						{ markdown: new MarkdownString(localize('immediateTrustRequestLearnMore', "If you don't trust the authors of these files, we do not recommend continuing as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.")) }
+						{ markdown: new MarkdownString(localize('immediateTrustRequestLearnMore', "If you don't trust the authors of these files, we do not recommend continuing as the files may be malicious.")) }
 					]
 				},
 				buttons: buttons.filter(b => b.type !== 'Cancel').map(button => {
@@ -352,7 +352,7 @@ export class WorkspaceTrustUXHandler extends Disposable implements IWorkbenchCon
 					!isSingleFolderWorkspace ?
 						localize('workspaceStartupTrustDetails', "{0} provides features that may automatically execute files in this workspace.", this.productService.nameShort) :
 						localize('folderStartupTrustDetails', "{0} provides features that may automatically execute files in this folder.", this.productService.nameShort),
-					learnMoreString ?? localize('startupTrustRequestLearnMore', "If you don't trust the authors of these files, we recommend to continue in restricted mode as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more."),
+					learnMoreString ?? localize('startupTrustRequestLearnMore', "If you don't trust the authors of these files, we recommend to continue in restricted mode as the files may be malicious."),
 					!isEmptyWindow ?
 						`\`${this.labelService.getWorkspaceLabel(workspaceIdentifier, { verbose: Verbosity.LONG })}\`` : '',
 				],
diff --git a/src/vs/workbench/electron-sandbox/desktop.contribution.ts b/src/vs/workbench/electron-sandbox/desktop.contribution.ts
index f6bae665b13..0dad037b7ff 100644
--- a/src/vs/workbench/electron-sandbox/desktop.contribution.ts
+++ b/src/vs/workbench/electron-sandbox/desktop.contribution.ts
@@ -294,7 +294,8 @@ import { MAX_ZOOM_LEVEL, MIN_ZOOM_LEVEL } from '../../platform/window/electron-s
 			'telemetry.enableCrashReporter': {
 				'type': 'boolean',
 				'description': localize('telemetry.enableCrashReporting', "Enable crash reports to be collected. This helps us improve stability. \nThis option requires restart to take effect."),
-				'default': true,
+				'default': false,
+				'doNotSuggest': true,
 				'tags': ['usesOnlineServices', 'telemetry'],
 				'markdownDeprecationMessage': localize('enableCrashReporterDeprecated', "If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the {0} setting.", `\`#${TELEMETRY_SETTING_ID}#\``),
 			}
diff --git a/src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts b/src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts
index 6c61a590324..3e07c07d3ff 100644
--- a/src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts
+++ b/src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts
@@ -81,7 +81,8 @@ export class NativeDialogHandler extends AbstractDialogHandler {

 		const detailString = (useAgo: boolean): string => {
 			return localize({ key: 'aboutDetail', comment: ['Electron, Chromium, Node.js and V8 are product names that need no translation'] },
-				"Version: {0}\nCommit: {1}\nDate: {2}\nElectron: {3}\nElectronBuildId: {4}\nChromium: {5}\nNode.js: {6}\nV8: {7}\nOS: {8}",
+				// the string concatenation avoids this instance of "VS Code" being replaced with "AX Code"
+				"Version: ${REPLACE_WITH_AXCODE_VERSION_6BE89F21}\nVS " + "Code: {0}\nCommit: {1}\nDate: {2}\nElectron: {3}\nElectronBuildId: {4}\nChromium: {5}\nNode.js: {6}\nV8: {7}\nOS: {8}",
 				version,
 				this.productService.commit || 'Unknown',
 				this.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',
diff --git a/src/vs/workbench/services/assignment/common/assignmentService.ts b/src/vs/workbench/services/assignment/common/assignmentService.ts
index 8e7aa27c14c..9438fc59cc6 100644
--- a/src/vs/workbench/services/assignment/common/assignmentService.ts
+++ b/src/vs/workbench/services/assignment/common/assignmentService.ts
@@ -146,7 +146,8 @@ registry.registerConfiguration({
 		'workbench.enableExperiments': {
 			'type': 'boolean',
 			'description': localize('workbench.enableExperiments', "Fetches experiments to run from a Microsoft online service."),
-			'default': true,
+			'default': false,
+			'doNotSuggest': true,
 			'scope': ConfigurationScope.APPLICATION,
 			'restricted': true,
 			'tags': ['usesOnlineServices']
diff --git a/src/vs/workbench/services/environment/browser/environmentService.ts b/src/vs/workbench/services/environment/browser/environmentService.ts
index 2ac401d7357..c978353a7c5 100644
--- a/src/vs/workbench/services/environment/browser/environmentService.ts
+++ b/src/vs/workbench/services/environment/browser/environmentService.ts
@@ -227,12 +227,10 @@ export class BrowserWorkbenchEnvironmentService implements IBrowserWorkbenchEnvi
 	get webviewExternalEndpoint(): string {
 		const endpoint = this.options.webviewEndpoint
 			|| this.productService.webviewContentExternalBaseUrlTemplate
-			|| 'https://{{uuid}}.vscode-cdn.net/{{quality}}/{{commit}}/out/vs/workbench/contrib/webview/browser/pre/';
+			|| 'https://{{uuid}}.cdn.axcode.simatic-ax.siemens.io/{{hash}}/out/vs/workbench/contrib/webview/browser/pre/';

-		const webviewExternalEndpointCommit = this.payload?.get('webviewExternalEndpointCommit');
 		return endpoint
-			.replace('{{commit}}', webviewExternalEndpointCommit ?? this.productService.commit ?? 'ef65ac1ba57f57f2a3961bfe94aa20481caca4c6')
-			.replace('{{quality}}', (webviewExternalEndpointCommit ? 'insider' : this.productService.quality) ?? 'insider');
+			.replace('{{hash}}', this.productService.webviewFilesHash ?? '00b0269924d52f4640cf24df0144dc68ae906568');
 	}

 	@memoize
diff --git a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
index cecd70c21af..c62593fb963 100644
--- a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
+++ b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
@@ -90,9 +90,8 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 		const iframeModulePath: AppResourcePath = `vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.${isESM ? 'esm.' : ''}html`;
 		if (platform.isWeb) {
 			const webEndpointUrlTemplate = this._productService.webEndpointUrlTemplate;
-			const commit = this._productService.commit;
-			const quality = this._productService.quality;
-			if (webEndpointUrlTemplate && commit && quality) {
+			const webviewFilesHash = this._productService.webviewFilesHash;
+			if (webEndpointUrlTemplate && webviewFilesHash) {
 				// Try to keep the web worker extension host iframe origin stable by storing it in workspace storage
 				const key = 'webWorkerExtensionHostIframeStableOriginUUID';
 				let stableOriginUUID = this._storageService.get(key, StorageScope.WORKSPACE);
@@ -104,8 +103,7 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 				const baseUrl = (
 					webEndpointUrlTemplate
 						.replace('{{uuid}}', `v--${hash}`) // using `v--` as a marker to require `parentOrigin`/`salt` verification
-						.replace('{{commit}}', commit)
-						.replace('{{quality}}', quality)
+						.replace('{{hash}}', webviewFilesHash)
 				);

 				const res = new URL(`${baseUrl}/out/${iframeModulePath}${suffix}`);
diff --git a/src/vs/workbench/services/preferences/common/preferencesModels.ts b/src/vs/workbench/services/preferences/common/preferencesModels.ts
index 8bc828292b1..2fb80ed52ac 100644
--- a/src/vs/workbench/services/preferences/common/preferencesModels.ts
+++ b/src/vs/workbench/services/preferences/common/preferencesModels.ts
@@ -522,6 +522,22 @@ export class DefaultSettings extends Disposable {

 	getRegisteredGroups(): ISettingsGroup[] {
 		const configurations = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurations().slice();
+		configurations.forEach(configuration => {
+			const properties = configuration.properties;
+			if (properties) {
+				for (const [key, property] of Object.entries(properties)) {
+					// We reuse `doNotSuggest` to kill two birds with one stone:
+					// disabling suggestions, and hiding from the settings UI.
+					// Alternatively, we could introduce a new field, but it
+					// seems like the original `doNotSuggest` functionality is
+					// implemented elsewhere, so we would not be able to disable
+					// suggestions for it.
+					if (property.doNotSuggest) {
+						delete properties[key];
+					}
+				}
+			}
+		});
 		const groups = this.removeEmptySettingsGroups(configurations.sort(this.compareConfigurationNodes)
 			.reduce<ISettingsGroup[]>((result, config, index, array) => this.parseConfig(config, result, array), []));

diff --git a/src/vs/workbench/services/storage/browser/storageService.ts b/src/vs/workbench/services/storage/browser/storageService.ts
index 68573404c1e..bedf03b871f 100644
--- a/src/vs/workbench/services/storage/browser/storageService.ts
+++ b/src/vs/workbench/services/storage/browser/storageService.ts
@@ -314,7 +314,8 @@ export class IndexedDBStorageDatabase extends Disposable implements IIndexedDBSt
 		}
 	}

-	private static readonly STORAGE_DATABASE_PREFIX = 'vscode-web-state-db-';
+	// this is to support hosting on sub-paths
+	private static readonly STORAGE_DATABASE_PREFIX = `vscode-web-state-db${window.location.pathname.replace(/\/$/, '')}/`;
 	private static readonly STORAGE_OBJECT_STORE = 'ItemTable';

 	private readonly _onDidChangeItemsExternal = this._register(new Emitter<IStorageItemsChangeEvent>());
diff --git a/test/automation/package-lock.json b/test/automation/package-lock.json
index 0253b826daf..40b1e03d743 100644
--- a/test/automation/package-lock.json
+++ b/test/automation/package-lock.json
@@ -1,12 +1,12 @@
 {
   "name": "vscode-automation",
-  "version": "1.71.0",
+  "version": "1.90.0",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
       "name": "vscode-automation",
-      "version": "1.71.0",
+      "version": "1.90.0",
       "license": "MIT",
       "dependencies": {
         "ncp": "^2.0.0",
diff --git a/test/automation/package.json b/test/automation/package.json
index 4d5dbd02f63..a8f040cc2fd 100644
--- a/test/automation/package.json
+++ b/test/automation/package.json
@@ -1,6 +1,6 @@
 {
   "name": "vscode-automation",
-  "version": "1.71.0",
+  "version": "1.90.0",
   "description": "VS Code UI automation driver",
   "author": {
     "name": "Microsoft Corporation"
@@ -31,4 +31,4 @@
     "npm-run-all": "^4.1.5",
     "watch": "^1.0.2"
   }
-}
+}
\ No newline at end of file
